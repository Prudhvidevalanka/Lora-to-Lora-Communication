#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>

// LoRa Configuration
#define LORA_SS 5  // LoRa SS pin
#define LORA_RST 14 // LoRa reset pin
#define LORA_DIO0 2 // LoRa DIO0 pin

// OLED Display Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Wi-Fi Configuration
const char* ssid = "Redmi 13 5G";
const char* password = "123456789";

// ThingSpeak API Keys
String apiKey1 = "4HY261BLDG68WFWJ";
String apiKey2 = "NTU4W5P5Q2J8GV7A";
const char* serverName = "http://api.thingspeak.com/update";

void setup() {
    Serial.begin(115200);

    // Initialize Wi-Fi
    WiFi.begin(ssid, password);
    Serial.print("Connecting to Wi-Fi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to Wi-Fi");

    // Initialize LoRa
    LoRa.setPins(LORA_SS, LORA_RST, LORA_DIO0);
    if (!LoRa.begin(433E6)) { // Set frequency to 433 MHz
        Serial.println("Starting LoRa failed!");
        while (1);
    }
    Serial.println("LoRa initialized!");

    // Initialize OLED
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("SSD1306 allocation failed");
        while (1);
    }
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(1);
    display.display();
    Serial.println("OLED initialized!");
}

void loop() {
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
        // Read incoming packet
        String receivedData = "";
        while (LoRa.available()) {
            receivedData += (char)LoRa.read();
        }

        Serial.print("Received data: ");
        Serial.println(receivedData);

        // Check and parse data based on slave ID
        if (receivedData.startsWith("S1:")) {
            Serial.println("Data from Slave 1");
            String slave1Data = receivedData.substring(3); // Remove "S1:" prefix
            parseAndDisplayData(slave1Data, "Slave 1");
        } else if (receivedData.startsWith("S2:")) {
            Serial.println("Data from Slave 2");
            String slave2Data = receivedData.substring(3); // Remove "S2:" prefix
            parseAndDisplayData(slave2Data, "Slave 2");
        } else {
            Serial.println("Unknown sender or invalid data.");
        }
    }
}

void parseAndDisplayData(String data, String slaveName) {
    // Example: "25.5,1013.2,150.0,300,0.75,1.2"
    float temperature, pressure, altitude, mq135, mq136, mq137;
    int parsed = sscanf(data.c_str(), "%f,%f,%f,%f,%f,%f",
                        &temperature, &pressure, &altitude, &mq135, &mq136, &mq137);

    if (parsed == 6) { // Ensure all 6 values are parsed
        // Display parsed data on Serial Monitor
        Serial.println("Parsed Data:");
        Serial.print(slaveName + " - Temperature: "); Serial.println(temperature);
        Serial.print(slaveName + " - Pressure: "); Serial.println(pressure);
        Serial.print(slaveName + " - Altitude: "); Serial.println(altitude);
        Serial.print(slaveName + " - MQ135: "); Serial.println(mq135);
        Serial.print(slaveName + " - H2S (MQ136): "); Serial.println(mq136);
        Serial.print(slaveName + " - NH3 (MQ137): "); Serial.println(mq137);

        // Update OLED Display
        display.clearDisplay();
        display.setCursor(0, 0);
        display.print(slaveName);
        display.print(" Temp: ");
        display.print(temperature);
        display.println(" C");

        display.setCursor(0, 10);
        display.print("Pressure: ");
        display.print(pressure);
        display.println(" kPa");

        display.setCursor(0, 20);
        display.print("Altitude: ");
        display.print(altitude);
        display.println(" m");

        display.setCursor(0, 30);
        display.print("MQ135: ");
        display.print(mq135);
        display.println(" ppm");

        display.setCursor(0, 40);
        display.print("H2S (MQ136): ");
        display.print(mq136);
        display.println(" ppm");

        display.setCursor(0, 50);
        display.print("NH3 (MQ137): ");
        display.print(mq137);
        display.println(" ppm");

        display.display();

        // Send data to ThingSpeak
        if (slaveName == "Slave 1") {
            sendToThingSpeak_slave1(temperature, pressure, altitude, mq135, mq136, mq137);
        } else if (slaveName == "Slave 2") {
            sendToThingSpeak_slave2(temperature, pressure, altitude, mq135, mq136, mq137);
        }
    } else {
        Serial.println("Error: Failed to parse data.");
    }
}

void sendToThingSpeak_slave1(float temp, float pressure, float altitude, int mq135, float mq136, float mq137) {
    sendToThingSpeak(apiKey1, temp, pressure, altitude, mq135, mq136, mq137);
}

void sendToThingSpeak_slave2(float temp, float pressure, float altitude, int mq135, float mq136, float mq137) {
    sendToThingSpeak(apiKey2, temp, pressure, altitude, mq135, mq136, mq137);
}

void sendToThingSpeak(String apiKey, float temp, float pressure, float altitude, int mq135, float mq136, float mq137) {
    if (WiFi.status() == WL_CONNECTED) {
        WiFiClient client;
        HTTPClient http;

        String httpRequestData = "api_key=" + apiKey +
                                 "&field1=" + String(altitude) +
                                 "&field2=" + String(temp) +
                                 "&field3=" + String(pressure) +
                                 "&field4=" + String(mq135) +
                                 "&field5=" + String(mq136) +
                                 "&field6=" + String(mq137);

        http.begin(client, serverName);
        http.addHeader("Content-Type", "application/x-www-form-urlencoded");

        int httpResponseCode = http.POST(httpRequestData);

        if (httpResponseCode > 0) {
            Serial.print("HTTP Response code: ");
            Serial.println(httpResponseCode);
        } else {
            Serial.print("Error code: ");
            Serial.println(httpResponseCode);
        }

        http.end();
    } else {
        Serial.println("Wi-Fi Disconnected. Attempting reconnection...");
        WiFi.begin(ssid, password);
    }
}
